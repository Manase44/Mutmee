generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id String @id @default(uuid())
  userName String @unique
  emailAddress String @unique
  password String
  registeredAt DateTime @default(now())

  profile Profile?
  posts Post[]
  comments Comment[]
  articles Article[]
  liked Like[]
}

model Profile{
  imageUrl String?
  bio String?
  website String?
  phoneNumber String?
  role String?

  userId String @unique
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post{
  postId String @id @default(uuid())
  mediaUrl String
  mediaType String
  caption String?
  publishedAt DateTime @default(now())
 

  posterId String
  poster User @relation(fields: [posterId], references: [id], onDelete: Cascade)

  comments Comment[]
  likes Like[]
}
 
model Like{
  likeId String @id @default(uuid())

  postLiked String
  post Post @relation(fields: [postLiked], references: [postId], onDelete: Cascade)

  userLiked String
  user User @relation(fields: [userLiked], references: [id], onDelete: Cascade)

  @@unique([postLiked, userLiked])
}
model Comment{
  commentId String @id @default(uuid())
  text String

  postId String
  post Post @relation(fields: [postId], references: [postId], onDelete: Cascade)

  commentedBy String
  user User @relation(fields: [commentedBy], references: [id], onDelete: Cascade)
}

model Article{
  articleId String @id @default(uuid())
  articleTitle String
  articleImageUrl String?
  articleContent String
  likes Int @default(0)

  authorId String
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
}